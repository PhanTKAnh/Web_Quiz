{"ast":null,"code":"var _jsxFileName = \"D:\\\\font-endt2\\\\Project-mini-5\\\\project-5\\\\src\\\\pages\\\\Question\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./question.scss\";\nimport { addAnswers } from \"../../action\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Question() {\n  _s();\n  // Local state to store the questions\n  const [questions, setQuestions] = useState([]);\n  const [answerQuestion, setAnswerQuestion] = useState({});\n  // Get the selected topic from the Redux store (replace with your correct state structure)\n  const selectedTopicId = useSelector(state => state.UsersReducer);\n  const users = useSelector(state => state.UsersReducer);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // Assuming selectedTopicId is a promise, resolve it\n    const fetchQuestions = async () => {\n      const resolvedQuestions = await selectedTopicId;\n      setQuestions(resolvedQuestions); // Store the resolved data in local state\n    };\n    fetchQuestions();\n  }, [selectedTopicId]);\n  const handleTick = (questionId, answerIndex) => {\n    setAnswerQuestion(prevState => ({\n      ...prevState,\n      [questionId]: answerIndex\n    }));\n  };\n  const handleSumit = e => {\n    e.preventDefault();\n    if (!users) {\n      console.error(\"User not logged in\");\n      return;\n    }\n    console.log(\"Submitted answers:\", answerQuestion);\n    const topics = questions[0].topics; // Assuming all questions have the same topic\n    dispatch(addAnswers(answerQuestion, topics, users));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSumit,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"B\\xE0i Quiz ch\\u1EE7 \\u0111\\u1EC1: HTML5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 12\n      }, this), questions.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [item.id, \".\", item.question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), item.answer.map((ans, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answer\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              onClick: () => handleTick(item.id, index),\n              checked: answerQuestion[item.id] === index,\n              type: \"radio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: ans\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 30\n          }, this)\n        }, void 0, false))]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"N\\u1ED9p b\\xE0i \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this)\n  }, void 0, false);\n}\n_s(Question, \"hqCPhKTEwK1+O3Ut8pYq1NvzYgc=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","addAnswers","jsxDEV","_jsxDEV","Fragment","_Fragment","Question","_s","questions","setQuestions","answerQuestion","setAnswerQuestion","selectedTopicId","state","UsersReducer","users","dispatch","fetchQuestions","resolvedQuestions","handleTick","questionId","answerIndex","prevState","handleSumit","e","preventDefault","console","error","log","topics","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","map","item","id","question","answer","ans","index","className","onClick","checked","type","value","_c","$RefreshReg$"],"sources":["D:/font-endt2/Project-mini-5/project-5/src/pages/Question/index.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./question.scss\"\r\nimport { addAnswers } from \"../../action\";\r\n\r\nfunction Question() {\r\n    // Local state to store the questions\r\n    const [questions, setQuestions] = useState([]);\r\n    const [answerQuestion,setAnswerQuestion] = useState({})\r\n    // Get the selected topic from the Redux store (replace with your correct state structure)\r\n    const selectedTopicId = useSelector(state => state.UsersReducer);\r\n    const users = useSelector(state => state.UsersReducer)\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        // Assuming selectedTopicId is a promise, resolve it\r\n        const fetchQuestions = async () => {\r\n            const resolvedQuestions = await selectedTopicId;\r\n            setQuestions(resolvedQuestions); // Store the resolved data in local state\r\n        };\r\n        \r\n        fetchQuestions();\r\n    }, [selectedTopicId]);\r\n    const handleTick = (questionId, answerIndex) => {\r\n        setAnswerQuestion(prevState => ({\r\n            ...prevState,\r\n            [questionId]: answerIndex\r\n        }));\r\n    }\r\n    const handleSumit = (e) => {\r\n        e.preventDefault();\r\n        if (!users) {\r\n            console.error(\"User not logged in\");\r\n            return;\r\n        }\r\n        console.log(\"Submitted answers:\", answerQuestion);\r\n        const topics = questions[0].topics; // Assuming all questions have the same topic\r\n        dispatch(addAnswers(answerQuestion, topics, users));\r\n    }\r\n    return (\r\n        <>\r\n           <form onSubmit={handleSumit}>\r\n           <h1>Bài Quiz chủ đề: HTML5</h1>\r\n            {\r\n                questions.map(item => (\r\n                    <div key={item.id}>\r\n                        <h4>{item.id}.{item.question}</h4>\r\n                             \r\n                           {item.answer.map((ans, index) => (\r\n                            <>\r\n                             <div className=\"answer\">\r\n                             <input onClick={() => handleTick(item.id,index)}   checked={answerQuestion[item.id] === index} type=\"radio\" />\r\n                             <label  key={index}>{ans}</label>\r\n                             </div>\r\n                            </>\r\n                            ))}\r\n                    </div>\r\n                ))\r\n            }\r\n            <input type=\"submit\" value=\"Nộp bài \" />\r\n           </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Question;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
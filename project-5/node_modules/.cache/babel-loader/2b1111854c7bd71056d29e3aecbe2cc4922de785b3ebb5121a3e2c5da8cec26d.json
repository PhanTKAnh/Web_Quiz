{"ast":null,"code":"var _jsxFileName = \"D:\\\\font-endt2\\\\Project-mini-5\\\\project-5\\\\src\\\\pages\\\\Question\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./question.scss\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Question() {\n  _s();\n  // Local state to store the questions\n  const [questions, setQuestions] = useState([]);\n  const [answerQuestion, setAnswerQuestion] = useState({});\n  // Get the selected topic from the Redux store (replace with your correct state structure)\n  const selectedTopicId = useSelector(state => state.questionReducer);\n  useEffect(() => {\n    // Assuming selectedTopicId is a promise, resolve it\n    const fetchQuestions = async () => {\n      const resolvedQuestions = await selectedTopicId;\n      setQuestions(resolvedQuestions); // Store the resolved data in local state\n    };\n    fetchQuestions();\n  }, [selectedTopicId]);\n  const handleTick = () => {\n    setAnswerQuestion();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"B\\xE0i Quiz ch\\u1EE7 \\u0111\\u1EC1: HTML5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 12\n      }, this), questions.length > 0 ? questions.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [item.id, \".\", item.question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }, this), item.answer.map((ans, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answer\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              onClick: () => handleTick(item.id, index),\n              checked: answerQuestion[item.id] === index,\n              type: \"radio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: ans\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 30\n          }, this)\n        }, void 0, false))]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No questions available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this)\n  }, void 0, false);\n}\n_s(Question, \"siZ69jEROUAYQLbaY4m9R0ZlbpE=\", false, function () {\n  return [useSelector];\n});\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["useEffect","useState","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","Question","_s","questions","setQuestions","answerQuestion","setAnswerQuestion","selectedTopicId","state","questionReducer","fetchQuestions","resolvedQuestions","handleTick","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","item","id","question","answer","ans","index","className","onClick","checked","type","_c","$RefreshReg$"],"sources":["D:/font-endt2/Project-mini-5/project-5/src/pages/Question/index.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./question.scss\"\r\n\r\nfunction Question() {\r\n    // Local state to store the questions\r\n    const [questions, setQuestions] = useState([]);\r\n    const [answerQuestion,setAnswerQuestion] = useState({})\r\n    // Get the selected topic from the Redux store (replace with your correct state structure)\r\n    const selectedTopicId = useSelector(state => state.questionReducer);\r\n\r\n    useEffect(() => {\r\n        // Assuming selectedTopicId is a promise, resolve it\r\n        const fetchQuestions = async () => {\r\n            const resolvedQuestions = await selectedTopicId;\r\n            setQuestions(resolvedQuestions); // Store the resolved data in local state\r\n        };\r\n        \r\n        fetchQuestions();\r\n    }, [selectedTopicId]);\r\n    const handleTick = () => {\r\n        setAnswerQuestion()\r\n    }\r\n    return (\r\n        <>\r\n           <form>\r\n           <h1>Bài Quiz chủ đề: HTML5</h1>\r\n            {questions.length > 0 ? (\r\n                questions.map(item => (\r\n                    <div key={item.id}>\r\n                        <h4>{item.id}.{item.question}</h4>\r\n                             \r\n                           {item.answer.map((ans, index) => (\r\n                            <>\r\n                             <div className=\"answer\">\r\n                             <input onClick={() => handleTick(item.id,index)}   checked={answerQuestion[item.id] === index} type=\"radio\" />\r\n                             <label  key={index}>{ans}</label>\r\n                             </div>\r\n                            </>\r\n                            ))}\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>No questions available</p>\r\n            )}\r\n           </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Question;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAO,iBAAiB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExB,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,cAAc,EAACC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EACvD;EACA,MAAMY,eAAe,GAAGX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,eAAe,CAAC;EAEnEf,SAAS,CAAC,MAAM;IACZ;IACA,MAAMgB,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,iBAAiB,GAAG,MAAMJ,eAAe;MAC/CH,YAAY,CAACO,iBAAiB,CAAC,CAAC,CAAC;IACrC,CAAC;IAEDD,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EACrB,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACrBN,iBAAiB,CAAC,CAAC;EACvB,CAAC;EACD,oBACIR,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACGf,OAAA;MAAAe,QAAA,gBACAf,OAAA;QAAAe,QAAA,EAAI;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC7Bd,SAAS,CAACe,MAAM,GAAG,CAAC,GACjBf,SAAS,CAACgB,GAAG,CAACC,IAAI,iBACdtB,OAAA;QAAAe,QAAA,gBACIf,OAAA;UAAAe,QAAA,GAAKO,IAAI,CAACC,EAAE,EAAC,GAAC,EAACD,IAAI,CAACE,QAAQ;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EAE9BG,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC,CAACK,GAAG,EAAEC,KAAK,kBAC3B3B,OAAA,CAAAE,SAAA;UAAAa,QAAA,eACCf,OAAA;YAAK4B,SAAS,EAAC,QAAQ;YAAAb,QAAA,gBACvBf,OAAA;cAAO6B,OAAO,EAAEA,CAAA,KAAMf,UAAU,CAACQ,IAAI,CAACC,EAAE,EAACI,KAAK,CAAE;cAAGG,OAAO,EAAEvB,cAAc,CAACe,IAAI,CAACC,EAAE,CAAC,KAAKI,KAAM;cAACI,IAAI,EAAC;YAAO;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC9GnB,OAAA;cAAAe,QAAA,EAAqBW;YAAG,GAAXC,KAAK;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAc,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B;QAAC,gBACL,CACD,CAAC;MAAA,GAVAG,IAAI,CAACC,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWZ,CACR,CAAC,gBAEFnB,OAAA;QAAAe,QAAA,EAAG;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC/B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC,gBACR,CAAC;AAEX;AAACf,EAAA,CA5CQD,QAAQ;EAAA,QAKWL,WAAW;AAAA;AAAAkC,EAAA,GAL9B7B,QAAQ;AA8CjB,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\font-endt2\\\\Project-mini-5\\\\project-5\\\\src\\\\pages\\\\Question\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Question() {\n  _s();\n  // Local state to store the questions\n  const [questions, setQuestions] = useState([]);\n\n  // Get the selected topic from the Redux store (replace with your correct state structure)\n  const selectedTopicId = useSelector(state => state.questionReducer);\n  useEffect(() => {\n    // Assuming selectedTopicId is a promise, resolve it\n    const fetchQuestions = async () => {\n      const resolvedQuestions = await selectedTopicId;\n      setQuestions(resolvedQuestions); // Store the resolved data in local state\n    };\n    fetchQuestions();\n  }, [selectedTopicId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"B\\xE0i Quiz ch\\u1EE7 \\u0111\\u1EC1: HTML5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), Array.isArray(questions) && questions.length > 0 ? questions.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [item.id, \".\", item.question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: item.answer.map((ans, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: ans\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 25\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No questions available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(Question, \"dcM88wFjL3sZwj6SGTC+jxY3JeU=\", false, function () {\n  return [useSelector];\n});\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["useEffect","useState","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","Question","_s","questions","setQuestions","selectedTopicId","state","questionReducer","fetchQuestions","resolvedQuestions","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","length","map","item","id","question","answer","ans","index","_c","$RefreshReg$"],"sources":["D:/font-endt2/Project-mini-5/project-5/src/pages/Question/index.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction Question() {\r\n    // Local state to store the questions\r\n    const [questions, setQuestions] = useState([]);\r\n    \r\n    // Get the selected topic from the Redux store (replace with your correct state structure)\r\n    const selectedTopicId = useSelector(state => state.questionReducer);\r\n\r\n    useEffect(() => {\r\n        // Assuming selectedTopicId is a promise, resolve it\r\n        const fetchQuestions = async () => {\r\n            const resolvedQuestions = await selectedTopicId;\r\n            setQuestions(resolvedQuestions); // Store the resolved data in local state\r\n        };\r\n        \r\n        fetchQuestions();\r\n    }, [selectedTopicId]);\r\n\r\n    return (\r\n        <>\r\n            <h2>Bài Quiz chủ đề: HTML5</h2>\r\n            {Array.isArray(questions) && questions.length > 0 ? (\r\n                questions.map(item => (\r\n                    <div key={item.id}>\r\n                        <h5>{item.id}.{item.question}</h5>\r\n                        <ul>\r\n                            {item.answer.map((ans, index) => (\r\n                                <li key={index}>{ans}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>No questions available</p>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Question;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMU,eAAe,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,eAAe,CAAC;EAEnEb,SAAS,CAAC,MAAM;IACZ;IACA,MAAMc,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,iBAAiB,GAAG,MAAMJ,eAAe;MAC/CD,YAAY,CAACK,iBAAiB,CAAC,CAAC,CAAC;IACrC,CAAC;IAEDD,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EAErB,oBACIP,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACIZ,OAAA;MAAAY,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9BC,KAAK,CAACC,OAAO,CAACb,SAAS,CAAC,IAAIA,SAAS,CAACc,MAAM,GAAG,CAAC,GAC7Cd,SAAS,CAACe,GAAG,CAACC,IAAI,iBACdrB,OAAA;MAAAY,QAAA,gBACIZ,OAAA;QAAAY,QAAA,GAAKS,IAAI,CAACC,EAAE,EAAC,GAAC,EAACD,IAAI,CAACE,QAAQ;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAClChB,OAAA;QAAAY,QAAA,EACKS,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC,CAACK,GAAG,EAAEC,KAAK,kBACxB1B,OAAA;UAAAY,QAAA,EAAiBa;QAAG,GAAXC,KAAK;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAC5B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA,GANCK,IAAI,CAACC,EAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOZ,CACR,CAAC,gBAEFhB,OAAA;MAAAY,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC/B;EAAA,eACH,CAAC;AAEX;AAACZ,EAAA,CApCQD,QAAQ;EAAA,QAKWL,WAAW;AAAA;AAAA6B,EAAA,GAL9BxB,QAAQ;AAsCjB,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}